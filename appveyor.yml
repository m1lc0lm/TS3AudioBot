version: appveyor-{branch}-{build}
branches:
  only:
    - master
    - develop
image: Visual Studio 2019
configuration: Release
clone_depth: 99999
environment:
  UPLOAD_TOKEN:
    secure: wQTHAXf9NMII8m8gga6cVnA/yE6PCW5jzOppF7jgUlM=
cache:
  - '%USERPROFILE%\.nuget\packages -> NextGenAudio\NextGenAudio.csproj, TSLib\TSLib.csproj, NextGenABotUnitTests\NextGenABotUnitTests.csproj'
  - 'WebInterface\node_modules -> WebInterface\package.json'
build:
  parallel: true
  verbosity: minimal


init:
  - pwsh: dotnet --version;

clone_script:
- pwsh: |
    git clone -q --recursive --branch=$env:APPVEYOR_REPO_BRANCH https://github.com/$env:APPVEYOR_REPO_NAME.git $env:APPVEYOR_BUILD_FOLDER
    git config remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
    git fetch
    git checkout -qf master
    git checkout -qf $env:APPVEYOR_REPO_COMMIT

install:
  - ps: Install-Product node LTS
  - pwsh: Install-Module Microsoft.PowerShell.Archive -MinimumVersion 1.2.5 -Repository PSGallery -Force

before_build:
- pwsh: |-
    nuget restore

deploy_script:
- pwsh: |-
    if(${env:UPLOAD_TOKEN}) {
      dotnet publish NextGenAudio -c Release --framework netcoreapp3.1
      $targets_linux = "linux-x64", "linux-arm", "linux-arm64"
      $targets = $targets_linux + "win-x64"
      foreach ($target in $targets) {
        Write-Host -ForegroundColor Yellow Publishing $target
        dotnet publish NextGenAudio -c Release --framework netcoreapp3.1 --self-contained --runtime $target -p:PublishSingleFile=true,IncludeSymbolsInSingleFile=true,PublishTrimmed=true
      }

      Write-Host -ForegroundColor Yellow Extracting Version
      $rel = [io.path]::combine("${env:APPVEYOR_BUILD_FOLDER}", "NextGenAudio", "bin", "Release")
      cd([io.path]::combine(${rel}, "netcoreapp3.1"))
      (dotnet .\NextGenAudio.dll -V | Out-String) -match "Version: (?<version>[-_\d\w\.]+)"
      $ver = $matches['version']
      echo "Current version: ${ver}"

      Write-Host -ForegroundColor Yellow Building Webinterface
      cd([io.path]::combine("${env:APPVEYOR_BUILD_FOLDER}", "WebInterface"))
      npm install
      npm run build
      $webInter = [io.path]::combine(${rel}, "WebInterface")
      Copy-Item "./dist" -Destination $webInter -Recurse

      Write-Host -ForegroundColor Yellow Packing dotnet core 3.1
      cd([io.path]::combine(${rel}, "netcoreapp3.1", "publish"))
      Compress-Archive -Path *.*,lib,../../WebInterface -DestinationPath NextGenAudio.zip
      Invoke-RestMethod -Uri "https://splamy.de/api/nightly/ts3ab/${env:APPVEYOR_REPO_BRANCH}?filename=NextGenAudio.zip&commit=${env:APPVEYOR_REPO_COMMIT}&version=${ver}" -Headers @{ "Content-Type" = "application/zip"; "Authorization" = "${env:UPLOAD_TOKEN}" } -Method Put -InFile .\NextGenAudio.zip

      Write-Host -ForegroundColor Yellow Packing win-x64
      cd([io.path]::combine(${rel}, "netcoreapp3.1", "win-x64", "publish"))
      Compress-Archive -Path NextGenAudio.exe,../../../WebInterface -DestinationPath NextGenAudio.zip
      Invoke-RestMethod -Uri "https://splamy.de/api/nightly/ts3ab/${env:APPVEYOR_REPO_BRANCH}_win_x64?filename=NextGenAudio.zip&commit=${env:APPVEYOR_REPO_COMMIT}&version=${ver}" -Headers @{ "Content-Type" = "application/zip"; "Authorization" = "${env:UPLOAD_TOKEN}" } -Method Put -InFile .\NextGenAudio.zip
      
      $pack_linux = [io.path]::combine("${env:APPVEYOR_BUILD_FOLDER}", "Tools", "pack_linux.csx")

      foreach ($target in $targets_linux) {
        Write-Host -ForegroundColor Yellow Packing $target
        cd([io.path]::combine(${rel}, "netcoreapp3.1", $target, "publish"))
        Copy-Item $webInter -Destination "./WebInterface" -Recurse
        # creates NextGenAudio.tar.gz
        dotnet script $pack_linux
        $name = $target -replace '-','_'
        Invoke-RestMethod -Uri "https://splamy.de/api/nightly/ts3ab/${env:APPVEYOR_REPO_BRANCH}_${name}?filename=NextGenAudio.tar.gz&commit=${env:APPVEYOR_REPO_COMMIT}&version=${ver}" -Headers @{ "Content-Type" = "application/gzip"; "Authorization" = "${env:UPLOAD_TOKEN}" } -Method Put -InFile .\NextGenAudio.tar.gz
      }
    }

on_success:
- pwsh: |-
    & ([io.path]::combine("${env:APPVEYOR_BUILD_FOLDER}", "Tools", "ts3notify.ps1")) 1
on_failure:
- pwsh: |-
    & ([io.path]::combine("${env:APPVEYOR_BUILD_FOLDER}", "Tools", "ts3notify.ps1")) 0
